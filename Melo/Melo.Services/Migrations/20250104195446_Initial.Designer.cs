// <auto-generated />
using System;
using Melo.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Melo.Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250104195446_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Melo.Services.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("DateOfRelease")
                        .HasColumnType("date");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Playtime")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PlaytimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("SongCount")
                        .HasColumnType("int");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Album", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.AlbumArtist", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AlbumId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("AlbumArtist", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.AlbumGenre", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AlbumId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AlbumGenre", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Artist", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.ArtistGenre", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ArtistId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ArtistGenre", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Playtime")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PlaytimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("SongCount")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("DateOfRelease")
                        .HasColumnType("date");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Playtime")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PlaytimeInSeconds")
                        .HasColumnType("int");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Song", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.SongAlbum", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SongOrder")
                        .HasColumnType("int");

                    b.HasKey("SongId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("SongAlbum", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.SongArtist", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SongId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("SongArtist", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.SongGenre", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SongId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SongGenre", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.SongPlaylist", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SongOrder")
                        .HasColumnType("int");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("SongPlaylist", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Subscribed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubscriptionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SubscriptionStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserAlbumLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("UserAlbumLike", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserAlbumView", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "AlbumId")
                        .HasName("PK_UserAlbumActivity");

                    b.HasIndex("AlbumId");

                    b.ToTable("UserAlbumView", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserArtistLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("UserArtistLike", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserArtistView", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ArtistId")
                        .HasName("PK_UserArtistActivity");

                    b.HasIndex("ArtistId");

                    b.ToTable("UserArtistView", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserGenreView", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "GenreId")
                        .HasName("PK_UserGenreActivity");

                    b.HasIndex("GenreId");

                    b.ToTable("UserGenreView", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserSongLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("UserSongLike", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.UserSongView", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "SongId")
                        .HasName("PK_UserSongActivity");

                    b.HasIndex("SongId");

                    b.ToTable("UserSongView", (string)null);
                });

            modelBuilder.Entity("Melo.Services.Entities.AlbumArtist", b =>
                {
                    b.HasOne("Melo.Services.Entities.Album", "Album")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbumArtist_Album");

                    b.HasOne("Melo.Services.Entities.Artist", "Artist")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbumArtist_Artist");

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Melo.Services.Entities.AlbumGenre", b =>
                {
                    b.HasOne("Melo.Services.Entities.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbumGenre_Album");

                    b.HasOne("Melo.Services.Entities.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_AlbumGenre_Genre");

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Melo.Services.Entities.ArtistGenre", b =>
                {
                    b.HasOne("Melo.Services.Entities.Artist", "Artist")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_ArtistGenre_Artist");

                    b.HasOne("Melo.Services.Entities.Genre", "Genre")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_ArtistGenre_Genre");

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Melo.Services.Entities.Playlist", b =>
                {
                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Playlist_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.SongAlbum", b =>
                {
                    b.HasOne("Melo.Services.Entities.Album", "Album")
                        .WithMany("SongAlbums")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_SongAlbum_Album");

                    b.HasOne("Melo.Services.Entities.Song", "Song")
                        .WithMany("SongAlbums")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongAlbum_Song");

                    b.Navigation("Album");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melo.Services.Entities.SongArtist", b =>
                {
                    b.HasOne("Melo.Services.Entities.Artist", "Artist")
                        .WithMany("SongArtists")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_SongArtist_Artist");

                    b.HasOne("Melo.Services.Entities.Song", "Song")
                        .WithMany("SongArtists")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongArtist_Song");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melo.Services.Entities.SongGenre", b =>
                {
                    b.HasOne("Melo.Services.Entities.Genre", "Genre")
                        .WithMany("SongGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_SongGenre_Genre");

                    b.HasOne("Melo.Services.Entities.Song", "Song")
                        .WithMany("SongGenres")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongGenre_Song");

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melo.Services.Entities.SongPlaylist", b =>
                {
                    b.HasOne("Melo.Services.Entities.Playlist", "Playlist")
                        .WithMany("SongPlaylists")
                        .HasForeignKey("PlaylistId")
                        .IsRequired()
                        .HasConstraintName("FK_SongPlaylist_Playlist");

                    b.HasOne("Melo.Services.Entities.Song", "Song")
                        .WithMany("SongPlaylists")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongPlaylist_Song");

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserAlbumLike", b =>
                {
                    b.HasOne("Melo.Services.Entities.Album", "Album")
                        .WithMany("UserAlbumLikes")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAlbumLike_Album");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserAlbumLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAlbumLike_User");

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserAlbumView", b =>
                {
                    b.HasOne("Melo.Services.Entities.Album", "Album")
                        .WithMany("UserAlbumViews")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAlbumActivity_Album");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserAlbumViews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAlbumActivity_User");

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserArtistLike", b =>
                {
                    b.HasOne("Melo.Services.Entities.Artist", "Artist")
                        .WithMany("UserArtistLikes")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_UserArtistLike_Artist");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserArtistLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserArtistLike_User");

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserArtistView", b =>
                {
                    b.HasOne("Melo.Services.Entities.Artist", "Artist")
                        .WithMany("UserArtistViews")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_UserArtistActivity_Album");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserArtistViews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserArtistActivity_User");

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserGenreView", b =>
                {
                    b.HasOne("Melo.Services.Entities.Genre", "Genre")
                        .WithMany("UserGenreViews")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGenreActivity_Genre");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserGenreViews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGenreActivity_User");

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserRole", b =>
                {
                    b.HasOne("Melo.Services.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserSongLike", b =>
                {
                    b.HasOne("Melo.Services.Entities.Song", "Song")
                        .WithMany("UserSongLikes")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSongLike_Song");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserSongLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSongLike_User");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.UserSongView", b =>
                {
                    b.HasOne("Melo.Services.Entities.Song", "Song")
                        .WithMany("UserSongViews")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSongActivity_Song");

                    b.HasOne("Melo.Services.Entities.User", "User")
                        .WithMany("UserSongViews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSongActivity_User");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melo.Services.Entities.Album", b =>
                {
                    b.Navigation("AlbumArtists");

                    b.Navigation("AlbumGenres");

                    b.Navigation("SongAlbums");

                    b.Navigation("UserAlbumLikes");

                    b.Navigation("UserAlbumViews");
                });

            modelBuilder.Entity("Melo.Services.Entities.Artist", b =>
                {
                    b.Navigation("AlbumArtists");

                    b.Navigation("ArtistGenres");

                    b.Navigation("SongArtists");

                    b.Navigation("UserArtistLikes");

                    b.Navigation("UserArtistViews");
                });

            modelBuilder.Entity("Melo.Services.Entities.Genre", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("ArtistGenres");

                    b.Navigation("SongGenres");

                    b.Navigation("UserGenreViews");
                });

            modelBuilder.Entity("Melo.Services.Entities.Playlist", b =>
                {
                    b.Navigation("SongPlaylists");
                });

            modelBuilder.Entity("Melo.Services.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Melo.Services.Entities.Song", b =>
                {
                    b.Navigation("SongAlbums");

                    b.Navigation("SongArtists");

                    b.Navigation("SongGenres");

                    b.Navigation("SongPlaylists");

                    b.Navigation("UserSongLikes");

                    b.Navigation("UserSongViews");
                });

            modelBuilder.Entity("Melo.Services.Entities.User", b =>
                {
                    b.Navigation("Playlists");

                    b.Navigation("UserAlbumLikes");

                    b.Navigation("UserAlbumViews");

                    b.Navigation("UserArtistLikes");

                    b.Navigation("UserArtistViews");

                    b.Navigation("UserGenreViews");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSongLikes");

                    b.Navigation("UserSongViews");
                });
#pragma warning restore 612, 618
        }
    }
}
